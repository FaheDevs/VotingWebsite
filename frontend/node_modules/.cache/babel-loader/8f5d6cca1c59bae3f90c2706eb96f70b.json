{"ast":null,"code":"const axios = require('axios');\n\nconst instance = axios.create({\n  baseURL: 'http://localhost:3001/api/'\n});\nlet refreshToken;\ninstance.interceptors.request.use(req => {\n  if (localStorage.getItem(\"JWT\")) {\n    req.headers['authorization'] = `Bearer ${localStorage.getItem(\"JWT\")}`;\n    return req;\n  }\n});\ninstance.interceptors.response.use(response => {\n  console.log(\"REFRESH DONE\");\n  return response;\n}, async error => {\n  const originalRequest = error.config;\n\n  if (error.config.url !== '/refreshToken' && error.response.status === 401 && originalRequest._retry !== true) {\n    originalRequest._retry = true;\n\n    if (refreshToken && refreshToken !== '') {\n      instance.defaults.headers.common['authorization'] = `Bearer ${refreshToken}`;\n      console.log('refresh token');\n      await instance.post('/refreshToken').then(response => {\n        instance.defaults.headers.common['authorization'] = `Bearer ${response.data.accessToken}`;\n        originalRequest.headers['authorization'] = `Bearer ${response.data.accessToken}`;\n      }).catch(error => {\n        console.log(error.response.status);\n        refreshToken = null;\n      });\n      return instance(originalRequest);\n    }\n  }\n});\ninstance.interceptors.request.use(config => {\n  const token = localStorage.getItem(\"JWT\");\n\n  if (token) {\n    // config.headers[\"Authorization\"] = 'Bearer ' + token;  // for Spring Boot back-end\n    config.headers[\"x-access-token\"] = token; // for Node.js Express back-end\n  }\n\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\ninstance.interceptors.response.use(res => {\n  return res;\n}, async err => {\n  const originalConfig = err.config;\n\n  if (originalConfig.url !== \"/\" && err.response) {\n    // Access Token was expired\n    if (err.response.status === 401 && !originalConfig._retry) {\n      originalConfig._retry = true;\n\n      try {\n        const rs = await instance.post(\"/auth/refreshtoken\", {\n          refreshToken: localStorage.getItem(\"JWT\")\n        });\n        const {\n          accessToken\n        } = rs.data;\n        TokenService.updateLocalAccessToken(accessToken);\n        return instance(originalConfig);\n      } catch (_error) {\n        return Promise.reject(_error);\n      }\n    }\n  }\n\n  return Promise.reject(err);\n});\nexport default instance;","map":{"version":3,"names":["axios","require","instance","create","baseURL","refreshToken","interceptors","request","use","req","localStorage","getItem","headers","response","console","log","error","originalRequest","config","url","status","_retry","defaults","common","post","then","data","accessToken","catch","token","Promise","reject","res","err","originalConfig","rs","TokenService","updateLocalAccessToken","_error"],"sources":["/Users/walidaddouche/Desktop/courseact/src/utils/client.js"],"sourcesContent":["const axios = require('axios');\nconst instance = axios.create({\n    baseURL: 'http://localhost:3001/api/',\n});\n\n\nlet refreshToken;\n\ninstance.interceptors.request.use(req => {\n        if (localStorage.getItem(\"JWT\")) {\n\n            req.headers['authorization'] = `Bearer ${localStorage.getItem(\"JWT\")}`;\n            return req;\n        }\n    }\n)\ninstance.interceptors.response.use((response) => {\n    console.log(\"REFRESH DONE\")\n    return response;\n}, async (error) => {\n    const originalRequest = error.config;\n    if (error.config.url !== '/refreshToken' && error.response.status === 401 && originalRequest._retry !== true) {\n        originalRequest._retry = true;\n        if (refreshToken && refreshToken !== '') {\n            instance.defaults.headers.common['authorization'] = `Bearer ${refreshToken}`;\n            console.log('refresh token');\n            await instance.post('/refreshToken').then((response) => {\n                instance.defaults.headers.common['authorization'] = `Bearer ${response.data.accessToken}`;\n                originalRequest.headers['authorization'] = `Bearer ${response.data.accessToken}`;\n            }).catch((error) => {\n                console.log(error.response.status);\n                refreshToken = null;\n            });\n            return instance(originalRequest);\n        }\n    }\n\n});\ninstance.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem(\"JWT\");\n    if (token) {\n      // config.headers[\"Authorization\"] = 'Bearer ' + token;  // for Spring Boot back-end\n      config.headers[\"x-access-token\"] = token; // for Node.js Express back-end\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\ninstance.interceptors.response.use(\n  (res) => {\n    return res;\n  },\n  async (err) => {\n    const originalConfig = err.config;\n    if (originalConfig.url !== \"/\" && err.response) {\n      // Access Token was expired\n      if (err.response.status === 401 && !originalConfig._retry) {\n        originalConfig._retry = true;\n        try {\n          const rs = await instance.post(\"/auth/refreshtoken\", {\n            refreshToken: localStorage.getItem(\"JWT\"),\n          });\n          const { accessToken } = rs.data;\n          TokenService.updateLocalAccessToken(accessToken);\n          return instance(originalConfig);\n        } catch (_error) {\n          return Promise.reject(_error);\n        }\n      }\n    }\n    return Promise.reject(err);\n  }\n);\nexport default instance;\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}